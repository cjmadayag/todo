{"version":3,"sources":["actionTypes.js","reducer.js","contextProvider.js","actions.js","components/ToDoForm.js","components/ToDoRow.js","pages/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["state","action","newList","type","ACTIONS","list","id","Date","now","item","payload","isDone","toggleForm","map","itemToEdit","isEditing","filter","createContext","React","useContext","children","useReducer","reducer","dispatch","Provider","value","ToDoForm","useState","task","setTask","Form","className","Label","Input","onChange","e","target","defaultValue","Button","color","onClick","actions","ToDoList","headerStyle","width","textAlign","Table","borderless","size","style","key","ToDo","Container","ToDoRow","Modal","isOpen","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0fd1db4e.chunk.js","sourcesContent":["export default {\r\n    TOGGLE_FORM : \"toggle_form\",\r\n    TOGGLE_EDIT_FORM : \"toggle_edit_form\",\r\n    ADD_ITEM : \"add_item\",\r\n    EDIT_ITEM : \"edit_item\",\r\n    DELETE_ITEM : \"delete_item\",\r\n    COMPLETE_TASK : \"complete_task\"\r\n  }","import ACTIONS from \"./actionTypes\"\r\n\r\nexport default (state,action)=>{\r\n    let newList = [];\r\n    switch (action.type){\r\n      case ACTIONS.ADD_ITEM:\r\n        return {...state,list:[...state.list,{id:Date.now(),item:action.payload.item,isDone:false}],toggleForm:false}\r\n  \r\n      case ACTIONS.EDIT_ITEM:\r\n        newList = state.list.map(item=>{\r\n          if(item.id === state.itemToEdit.id){\r\n            item.item = action.payload.item\r\n          }\r\n          return item\r\n        })\r\n        return {...state,list:newList,isEditing:false,itemToEdit:{},toggleForm:false}\r\n  \r\n      case ACTIONS.COMPLETE_TASK:\r\n        newList = state.list.map(item=>{\r\n          if(item.id===action.payload.id){\r\n            item.isDone = true\r\n          }\r\n          return item\r\n        })\r\n        return {...state,list:newList}\r\n      \r\n      case ACTIONS.DELETE_ITEM:\r\n        newList = state.list.filter(item=>(item.id!==action.payload.id))\r\n        return {...state,list:newList}\r\n      \r\n      case ACTIONS.TOGGLE_FORM:\r\n        if(state.toggleForm){\r\n          return {...state,toggleForm:false,isEditing:false,itemToEdit:{}}\r\n        }else{\r\n          return {...state,toggleForm:true}\r\n        }\r\n      \r\n      case ACTIONS.TOGGLE_EDIT_FORM:\r\n        return {...state,toggleForm:true,isEditing:true,itemToEdit:action.payload}\r\n  \r\n      default:\r\n        return action;\r\n    }\r\n  }","import React,{useReducer} from \"react\";\r\nimport reducer from \"./reducer\"\r\n\r\nexport const createContext = React.createContext();\r\n\r\nexport const useContext = ()=>{\r\n  return React.useContext(createContext)\r\n};\r\n\r\nexport default ({children})=>{\r\n  const initialState = {\r\n      list:[],\r\n      toggleForm:false,\r\n      isEditing:false,\r\n      itemToEdit:{}\r\n    }\r\n\r\n  const [state,dispatch] = useReducer(reducer,initialState)\r\n\r\n  return(\r\n    <createContext.Provider value={[state,dispatch]}>\r\n      {children}\r\n    </createContext.Provider>\r\n  )\r\n}","import ACTIONS from \"./actionTypes\";\r\n\r\nexport const toggleForm = ()=>({type:ACTIONS.TOGGLE_FORM})\r\nexport const toggleEditForm = (item)=>({type:ACTIONS.TOGGLE_EDIT_FORM,payload:item})\r\nexport const addItem = (item)=>({type:ACTIONS.ADD_ITEM,payload:{item}})\r\nexport const editItem = (item)=>({type:ACTIONS.EDIT_ITEM,payload:{item}})\r\nexport const deleteItem = (id)=>({type:ACTIONS.DELETE_ITEM,payload:{id}})\r\nexport const completeTask = (id)=>({type:ACTIONS.COMPLETE_TASK,payload:{id}})","import React,{useState} from \"react\";\r\nimport {Form,Label,Input,Button} from \"reactstrap\";\r\nimport {useContext} from \"../contextProvider\";\r\nimport * as actions from \"../actions\";\r\n\r\nconst ToDoForm = ()=>{\r\n  const [state,dispatch] = useContext();\r\n\r\n  const [task,setTask] = useState(\"\");\r\n\r\n  return(\r\n    <Form\r\n      className=\"py-4 d-flex flex-column\"\r\n    >\r\n      <Label className=\"h5 d-flex justify-content-center mt-3\">New Task</Label>\r\n      <hr className=\"w-100\"/>\r\n      <Label\r\n        className=\"ml-5 my-2\"\r\n      >Task Name</Label>\r\n      <Input\r\n        className=\"col-10 mx-auto\"\r\n        onChange={(e)=>setTask(e.target.value)}\r\n        defaultValue={state.isEditing?state.itemToEdit.item:\"\"}\r\n      />\r\n      <div\r\n        className=\"mx-auto mt-3\"\r\n      >\r\n        {state.isEditing ? (\r\n          <Button\r\n            color=\"warning\"\r\n            className=\"mr-1\"\r\n            onClick={()=>{\r\n              dispatch(actions.editItem(task))\r\n              setTask(\"\")\r\n            }}\r\n          >Edit</Button>\r\n          ) : (\r\n          <Button\r\n            color=\"success\"\r\n            className=\"mr-1\"\r\n            onClick={()=>{\r\n              dispatch(actions.addItem(task))\r\n              setTask(\"\")\r\n            }}\r\n          >Add</Button>\r\n          )\r\n        }\r\n        <Button\r\n          color=\"danger\"\r\n          className=\"ml-1\"\r\n          onClick={()=>dispatch(actions.toggleForm())}\r\n        >\r\n          Close\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default ToDoForm;","import React from \"react\"\r\nimport {Table,Button} from \"reactstrap\"\r\nimport {useContext} from \"../contextProvider\"\r\nimport * as actions from \"../actions\";\r\n\r\nconst ToDoList = ()=>{\r\n  const [state,dispatch] = useContext();\r\n\r\n  const headerStyle = { width:\"33%\", textAlign:\"center\" }\r\n\r\n  return(\r\n    <Table\r\n      borderless\r\n      size=\"sm\"\r\n    >\r\n      <thead>\r\n        <tr>\r\n          <th\r\n            style={headerStyle}\r\n          >Task</th>\r\n          <th\r\n            style={headerStyle}\r\n          >Status</th>\r\n          <th\r\n            style={headerStyle}\r\n          >Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {state.list.map(task=>(\r\n          <tr\r\n            key={task.id}\r\n          >\r\n            <td className=\"text-center\">{task.item}</td>\r\n            <td className=\"text-center\">\r\n                {task.isDone?\"Completed\":\"Incomplete\"}\r\n            </td>\r\n            <td\r\n              className=\"d-flex justify-content-center\"\r\n            >\r\n              <Button\r\n                size=\"sm\"\r\n                color=\"warning\"\r\n                className=\"mx-1\"\r\n                onClick={()=>dispatch(actions.toggleEditForm(task))}\r\n              >Edit\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                color=\"info\"\r\n                className=\"mx-1\"\r\n                onClick={()=>dispatch(actions.completeTask(task.id))}\r\n              >Done\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                color=\"danger\"\r\n                className=\"mx-1\"\r\n                onClick={()=>dispatch(actions.deleteItem(task.id))}\r\n              >Delete\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default ToDoList;","import React from \"react\";\r\nimport {useContext} from \"../contextProvider\";\r\nimport * as actions from \"../actions\";\r\nimport {Container,Form,Label,Button,Modal} from \"reactstrap\";\r\nimport {ToDoForm,ToDoRow} from \"../components\";\r\n\r\nconst ToDo = ()=>{\r\n  const [state,dispatch] = useContext();\r\n    \r\n  return(\r\n    <Container>\r\n      <Form\r\n        className=\"col-8 mt-5 mx-auto border rounded\"\r\n      >\r\n        <Label\r\n          className=\"h3 mt-3 d-flex justify-content-center\"\r\n        >To Do</Label>\r\n        <Button\r\n          className=\"btn-success\"\r\n          onClick={()=>dispatch(actions.toggleForm())}\r\n        >Add New Task\r\n        </Button>\r\n        <hr/>\r\n        <ToDoRow/>\r\n      </Form>\r\n      <Modal\r\n        isOpen={state.toggleForm}\r\n      >\r\n        <ToDoForm/>\r\n      </Modal>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\nimport ContextProvider from \"./contextProvider\";\nimport ToDo from \"./pages/ToDo\";\n\nconst App = ()=>{\n  return (\n    <ContextProvider>\n      <ToDo/>\n    </ContextProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./style.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}